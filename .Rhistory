x <- table(x)
}
x <- rev(sort(x))
plot( x, type = 'h', axes = F, lwd = 16,
xlab = "", ylab = ylab, main = main )
axis(2)
points( x, type = 'h', lwd = 12,
col = heat.colors(length(x)) )
y <- cumsum(x)/sum(x)
par(new = T)
plot(y, type = "b", lwd = 3, pch = 7,
axes = FALSE,
xlab='', ylab='', main='')
points(y, type = 'h')
axis(4)
par(las=0)
mtext("Cumulated frequency", side=4, line=3)
print(names(x))
axis(1, at=1:length(x), labels=names(x))
par(op)
}
pareto(attenu$event)
title(main="Pareto plot with cumulated frequencies")
#Pie chart
x <- apply(HairEyeColor, 2, sum)
pie(x)
title(main="Pie chart")
#it makes sense to plot trees (dendograms) in polar coordinates.
library(ape)
example(plot.ancestral)
example(plot.phylo)
m <- outer(m, n[[i]], paste)
}
names(y) <- m
}
y
}
col1 <- c("red", "green", "blue", "brown")
col2 <- c("red", "light coral",
"green", "light green",
"blue", "light blue",
"brown", "rosy brown")
col3 <- col2[c(1,2,1,2,3,4,3,4,5,6,5,6,7,8,7,8)]
op <- par(mfrow=c(3,1), mar=c(8,4,0,2), oma=c(0,0,2,0), las=2)
barplot(olap(Titanic,1),   space=0, col=col1)
barplot(olap(Titanic,2:1), space=0, col=col2)
barplot(olap(Titanic,3:1), space=0, col=col3)
par(op)
mtext("Region tree", font = 2, line = 3)
#A TempleMVV plot can be seen as those barplots overlaid on one another.
x1 <- olap(Titanic,3:1)
x2 <- rep(olap(Titanic,2:1), each=dim(Titanic)[3])
x3 <- rep(olap(Titanic,1),   each=prod(dim(Titanic)[2:3]))
x4 <- rep(sum(Titanic),      each=prod(dim(Titanic)[1:3]))
op <- par(mar=c(8,4,4,2))
barplot(x4, names.arg="", axes = FALSE, col = "light coral")
barplot(x3, names.arg="", axes = FALSE, col = "light green",  add = TRUE)
barplot(x2, names.arg="", axes = FALSE, col = "light blue",   add = TRUE)
barplot(x1, las=2,        axes = FALSE, col = "yellow", add = TRUE)
mtext("TempleMVV Plot", line=2, font=2, cex=1.2)
par(op)
#Dotchart
#When there are many values, "dotplots" can replace column plots.
x <- apply(HairEyeColor, 2, sum)
dotchart(x, main="dotchart")
library(MASS)  # For the Cars93 data set
#Dotchart
#When there are many values, "dotplots" can replace column plots.
x <- apply(HairEyeColor, 2, sum)
dotchart(x, main="dotchart")
library(MASS)  # For the Cars93 data set
dotchart(table(Cars93$Manufacturer))
library(nlme)
data(Milk)
dotchart(table(Milk$Cow))
#Point cloud
data(cars)
plot(cars$dist ~ cars$speed,
xlab = "Speed (mph)",
ylab = "Stopping distance (ft)",
las = 1)
title(main = "Point cloud")
plot(cars$dist ~ cars$speed,
xlab = "Speed (mph)",
ylab = "Stopping distance (ft)",
las = 1)
title(main = "cars data")
rug(side=1, jitter(cars$speed, 5))
rug(side=2, jitter(cars$dist, 20))
op <- par()
layout( matrix( c(2,1,0,3), 2, 2, byrow=T ),
c(1,6), c(4,1),
)
par(mar=c(1,1,5,2))
plot(cars$dist ~ cars$speed,
xlab='', ylab='',
las = 1)
#Dotchart
#When there are many values, "dotplots" can replace column plots.
x <- apply(HairEyeColor, 2, sum)
dotchart(x, main="dotchart")
library(MASS)  # For the Cars93 data set
dotchart(table(Cars93$Manufacturer))
library(nlme)
data(Milk)
library(nlme)
data(Milk)
dotchart(table(Milk$Cow))
#Point cloud
data(cars)
#Point cloud
data(cars)
plot(cars$dist ~ cars$speed,
xlab = "Speed (mph)",
ylab = "Stopping distance (ft)",
las = 1)
title(main = "Point cloud")
plot(cars$dist ~ cars$speed,
xlab = "Speed (mph)",
ylab = "Stopping distance (ft)",
las = 1)
title(main = "cars data")
rug(side=1, jitter(cars$speed, 5))
rug(side=2, jitter(cars$dist, 20))
op <- par()
layout( matrix( c(2,1,0,3), 2, 2, byrow=T ),
c(1,6), c(4,1),
)
par(mar=c(1,1,5,2))
plot(cars$dist ~ cars$speed,
xlab='', ylab='',
las = 1)
rug(side=1, jitter(cars$speed, 5) )
rug(side=2, jitter(cars$dist, 20) )
title(main = "cars data")
op <- par()
layout( matrix( c(2,1,0,3), 2, 2, byrow=T ),
c(1,6), c(4,1),
)
par(mar=c(1,1,5,2))
rug(side=2, jitter(cars$dist, 20))
op <- par()
layout( matrix( c(2,1,0,3), 2, 2, byrow=T ),
c(1,6), c(4,1),
)
par(mar=c(1,1,5,2))
plot(cars$dist ~ cars$speed,
xlab='', ylab='',
las = 1)
rug(side=1, jitter(cars$speed, 5) )
rug(side=2, jitter(cars$dist, 20) )
title(main = "cars data")
par(mar=c(1,2,5,1))
boxplot(cars$dist, axes=F)
title(ylab='Stopping distance (ft)', line=0)
par(mar=c(5,1,1,2))
boxplot(cars$speed, horizontal=T, axes=F)
title(xlab='Speed (mph)', line=1)
par(op)
plot(dist ~ speed, data = cars,
main = "\"cars\" data and regression line")
abline(lm( dist ~ speed, data = cars),
col = 'red')
#The "loess" function approximates the data with a curve, not necessarily a line. We shall explain what is behind this (it is called "local regression") when we tackle regression.
plot(cars,
xlab = "Speed (mph)",
ylab = "Stopping distance (ft)",
las = 1)
# lines(loess(dist ~ speed, data=cars),
#       col = "red") # Didn't that use to work?
r <- loess(dist ~ speed, data=cars)
lines(r$x, r$fitted, col="red")
title(main = "\"cars\" data and loess curve")
plot(cars,
xlab = "Speed (mph)",
ylab = "Stopping distance (ft)",
las = 1)
lines(lowess(cars$speed, cars$dist,
f = 2/3, iter = 3),
col = "red")
title(main = "\"cars\" data and lowess curve")
library(plotrix)
clock24.plot(x,
line.col = "blue",
lwd = 10)
# See also polar.plot, radial.plot
library(circular)
rose.diag(x)
# x <- as.circular(rep( 2*pi / 24 * (0:23), x ))
detach("package:circular")   # redefines "var"...
#Lattice
library(lattice)
y <- cars$dist
x <- cars$speed
# vitesse <- shingle(x, co.intervals(x, number=6))
vitesse <- equal.count(x)
histogram(~ y | vitesse)
bwplot(~ y | vitesse, layout=c(1,6))
densityplot(~ y | vitesse, aspect='xy')
densityplot(~ y | vitesse, layout=c(1,6))
#Convex hull####
#To have an idea of the shape of the cloud of points, some people suggest to have a look at the convex hull of the cloud.
plot(cars)
polygon( cars[chull(cars),], col="pink", lwd=3)
points(cars)
#Ellipse####
draw.ellipse <- function (
x, y = NULL,
N = 100,
method = lines,
...
) {
if (is.null(y)) {
y <- x[,2]
x <- x[,1]
}
centre <- c(mean(x), mean(y))
m <- matrix(c(var(x),cov(x,y),
cov(x,y),var(y)),
nr=2,nc=2)
e <- eigen(m)
r <- sqrt(e$values)
v <- e$vectors
theta <- seq(0,2*pi, length=N)
x <- centre[1] + r[1]*v[1,1]*cos(theta) +
r[2]*v[1,2]*sin(theta)
y <- centre[2] + r[1]*v[2,1]*cos(theta) +
r[2]*v[2,2]*sin(theta)
method(x,y,...)
}
plot(cars)
draw.ellipse(cars, col="blue", lwd=3)
#2-dimensional density estimation
library(hexbin)
plot(hexbin(x,y))
library(MASS)
z <- kde2d(x,y, n=50)
image(z, main = "Density estimation")
##Counter Plot
contour(z,
col = "red", lwd = 3, drawlabels = FALSE,
add = TRUE,
main = "Density estimation: contour plot")
persp(z, main = "Density estimation: perspective plot")
persp(z,
phi = 45, theta = 30,
xlab = "age", ylab = "income", zlab = "density",
main = "Density estimation: perspective plot")
op <- par(mar=c(0,0,2,0)+.1)
persp(z, phi = 45, theta = 30,
xlab = "age", ylab = "income", zlab = "density",
col = "yellow", shade = .5, border = NA,
main = "Density estimation: perspective plot")
par(op)
r <- loess(y~x)
o <- order(x)
plot( jitter(x, amount = .5), y, pch = ".",
xlab = "age", ylab = "income",
main = "Loess curve")
lines(r$x[o], r$fitted[o], col="blue", lwd=3)
r <- kde2d(x,y)
contour(r, drawlabels=F, col="red", lwd=3, add=T)
##Box-and-whiskers plots (boxplots)
data(InsectSprays)
boxplot(count ~ spray,
data = InsectSprays,
xlab = "Type of spray",
ylab = "Insect count",
main = "InsectSprays data",
varwidth = TRUE,
col = "lightgray")
#Violin plot
#(This package used to be called UsingR)
library(UsingR)
n <- 1000
k <- 10
x <- factor(sample(1:5, n, replace=T))
m <- rnorm(k,sd=2)
s <- sample( c(rep(1,k-1),2) )
y <- rnorm(n, m[x], s[x])
simple.violinplot(y~x, col='pink')
library(lattice)
bwplot( y ~ x,
panel = panel.violin,
main = "panel.violin" )
#cumulative distribution function
op <- par(mfrow=c(3,1), mar=c(2,2,3,2))
n <- length(x)
plot(sort(x), (1:n)/n,
type = "l",
main = "Cumulative distribution function")
bwplot( ~ y | x,
panel = panel.bpplot,
main = "panel.bpplot",
layout = c(1,5) )
#Highest Density Region (HDR)
#Yet another modification of the box-and-whiskers plot
library(hdrcde)
hdr.boxplot(rnorm(1000), col = "pink",
main = "Highest Density Region Plot")
hdr.boxplot(faithful$waiting,
col = "pink",
main = "Highest Density Region Plot")
#Parallel scatterplot
stripchart(InsectSprays$count ~ InsectSprays$spray,
method = 'jitter')
#Colored scatterplot
#In higher dimensions, one often adds colors in scatterplots.
data(iris)
plot(iris[1:4],
pch = 21,
bg = c("red", "green", "blue")[
as.numeric(iris$Species)
])
a <- as.vector(t(iris[1]))
b <- rnorm(length(a))
plot(b ~ a,
pch = 21,
bg = c("red", "green", "blue")[
as.numeric(iris$Species)
],
main = "1-dimensional scatter plot",
xlab = "Number of insects",
ylab = "")
# Histograms
#We can also plot several histograms, one for each group.
hists <- function (x, y, ...) {
y <- factor(y)
n <- length(levels(y))
op <- par( mfcol=c(n,1), mar=c(2,4,1,1) )
b <- hist(x, ..., plot=F)$breaks
for (l in levels(y)){
hist(x[y==l], breaks=b, probability=T, ylim=c(0,.3),
main="", ylab=l, col='lightblue', xlab="", ...)
points(density(x[y==l]), type='l', lwd=3, col='red')
}
par(op)
}
hists(InsectSprays$count, InsectSprays$spray)
#Lattice (treillis) plots
#We can do the same thing with lattice plots.
library(lattice)
histogram( ~ count | spray, data=InsectSprays)
densityplot( ~ count | spray, data = InsectSprays )
bwplot( ~ count | spray, data = InsectSprays )
bwplot( ~ count | spray, data = InsectSprays, layout=c(1,6) )
#R squared value estimation####
aov( count ~ spray, data = InsectSprays )
s <- summary(aov( count ~ spray, data = InsectSprays ))[[1]][,2]
s[1]/(s[1]+s[2])
#Fourfoldplot####
#If the variables only have two values, you can also use the "fourfoldplot" function.
data(bacteria, package="MASS")
fourfoldplot( table(bacteria$y, bacteria$ap) )
bwplot( ~ count | spray, data = InsectSprays, layout=c(1,6) )
#Fourfoldplot####
#If the variables only have two values, you can also use the "fourfoldplot" function.
data(bacteria, package="MASS")
fourfoldplot( table(bacteria$y, bacteria$ap) )
fourfoldplot( table(bacteria$y,
bacteria$ap,
bacteria$week) )
#Starplot####
v <- .2
n <- 50
#Starplot####
v <- .2
n <- 50
x <- runif(n)
y <- runif(n)
z1 <- x+y+v*rnorm(n)
z2 <- x*y+v*rnorm(n)
z3 <- x^2 + y^2 + v*rlnorm(n)
stars( data.frame(z1,z2,z3),
location = cbind(x,y),
labels = NULL,
len = 1/sqrt(n)/2,
axes = TRUE,
draw.segments = TRUE,
col.segments = 1:5,
main = "Star plot" )
#Line chart####
#Here, we plot several variables Y1, Y2, etc. as a function of X. We can overlay the curves with the "matplot" function.
n <- 10
d <- data.frame(y1 = abs(rnorm(n)),
y2 = abs(rnorm(n)),
y3 = abs(rnorm(n)),
y4 = abs(rnorm(n)),
y5 = abs(rnorm(n))
)
matplot(d,
type = 'l',
ylab = "",
main = "Matplot")
palette(rainbow(12, s = 0.6, v = 0.75))
stars(mtcars[, 1:7],
len = 0.8,
key.loc = c(12, 1.5),
main = "Motor Trend Cars",
draw.segments = TRUE)
#3D####
# From the manual
x <- seq(-10, 10, length=50)
y <- x
f <- function(x,y) {
r <- sqrt(x^2+y^2)
10 * sin(r)/r
}
z <- outer(x, y, f)
z[is.na(z)] <- 1
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
shade=.5,
xlab = "X", ylab = "Y", zlab = "Z")
#stereoscopic plot####
data(iris)
print(cloud(Sepal.Length ~ Petal.Length * Petal.Width,
data = iris, cex = .8,
groups = Species,
subpanel = panel.superpose,
main = "Stereo",
screen = list(z = 20, x = -70, y = 3)),
split = c(1,1,2,1), more = TRUE)
print(cloud(Sepal.Length ~ Petal.Length * Petal.Width,
data = iris, cex = .8,
groups = Species,
subpanel = panel.superpose,
main = "Stereo",
screen = list(z = 20, x = -70, y = 0)),
split = c(2,1,2,1))
histogram( ~ Sepal.Length | Species, data = iris,
layout = c(1,3) )
xyplot( Sepal.Length ~ Sepal.Width | Species, data = iris,
layout = c(1,3) )
data(iris)
plot(iris[1:4], pch=21,
bg=c("red", "green", "blue")[as.numeric(iris$Species)])
a <- rnorm(10)
b <- 1+ rnorm(10)
c <- 1+ rnorm(10)
d <- rnorm(10)
x <- c(a,b,c,d)
y <- factor(c( rep("A",20), rep("B",20)))
z <- factor(c( rep("U",10), rep("V",20), rep("U",10) ))
op <- par(mfrow=c(2,2))
plot(x~y)
plot(x~z)
plot(x[z=="U"] ~ y[z=="U"], border="red", ylim=c(min(x),max(x)))
plot(x[z=="V"] ~ y[z=="V"], border="blue", add=T)
plot(x[y=="A"] ~ z[y=="A"], border="red", ylim=c(min(x),max(x)))
plot(x[y=="B"] ~ z[y=="B"], border="blue", add=T)
par(op)
l <- rep("",length(x))
for (i in 1:length(x)){
l[i] <- paste(y[i],z[i])
}
l <- factor(l)
boxplot(x~l)
#A pie chart with a shadow.
shaded.pie <- function (...) {
pie(...)
op <- par(new=T)
a <- seq(0,2*pi,length=100)
for (i in (256:64)/256) {
r <- .8-.1*(1-i)
polygon( .1+r*cos(a), -.2+r*sin(a), border=NA, col=rgb(i,i,i))
}
par(new=T)
pie(...)
par(op)
}
x <- rpois(10,5)
x <- x[x>0]
shaded.pie(x)
#xyplot####
#The following example (three quantitative variables) displays earthquake epicenters.
data(quakes)
library(lattice)
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
#3d scatterplot####
library(scatterplot3d)
scatterplot3d(quakes[,1:3],
highlight.3d = TRUE,
pch = 20)
#barchart####
#An example with a quantitative variable and 3 qualitative variables in which, if we fix the qualitative variables, we have a single observation (this is sometimes called a "factorial design").
data(barley)
barchart(yield ~ variety | year * site, data=barley)
#The "scales" argument allows you to change the axes and their ticks (here, we avoid label overlap).
barchart(yield ~ variety | year * site, data = barley,
ylab = "Barley Yield (bushels/acre)",
scales = list(x = list(0, abbreviate = TRUE,
minlength = 5)))
dotplot(yield ~ variety | year * site, data = barley)
dotplot(variety ~ yield | year * site, data = barley)
y <- cars$dist
x <- cars$speed
vitesse <- shingle(x, co.intervals(x, number=6))
histogram(~ x | vitesse, type = "density",
panel = function(x, ...) {
ps <- trellis.par.get('plot.symbol')
nps <- ps
nps$cex <- 1
trellis.par.set('plot.symbol', nps)
panel.histogram(x, ...)
panel.densityplot(x, col = 'brown', lwd=3)
panel.xyplot(x = jitter(x), y = rep(0, length(x)), col='brown' )
panel.mathdensity(dmath = dnorm,
args = list(mean=mean(x),sd=sd(x)),
lwd=3, lty=2, col='white')
trellis.par.set('plot.symbol', ps)
})
